apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        exclude '**/pom.xml'
        exclude '**/proguard_annotations.pro'
        classpath += files(android.bootClasspath)
    }

    task androidJavadocJar(type: Jar) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts.add('archives', androidJavadocJar)
    artifacts.add('archives', androidSourcesJar)

    version = VERSION_NAME
    group = GROUP
    project.archivesBaseName = POM_ARTIFACT_ID

    ext {
        bintrayRepo = 'maven'
        bintrayName = "${GROUP}:${POM_ARTIFACT_ID}"
        bintrayDescription = POM_DESCRIPTION
        projectUrl = 'https://github.com/xjy2061/Treasure'
        issuesUrl = 'https://github.com/xjy2061/Treasure/issues'
        scmUrl = 'https://github.com/xjy2061/Treasure.git'
        scmConnection = 'scm:git:https://github.com/xjy2061/Treasure.git'
        scmDeveloperConnection = 'scm:git:git@github.com:xjy2061/Treasure.git'
    }

    def pomConfig = {
        scm {
            url scmUrl
            connection scmConnection
            developerConnection scmDeveloperConnection
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'xjy2061'
                name 'xjy2061'
            }
        }
    }

    publishing.publications {
        mavenTreasure(MavenPublication) {
            artifactId POM_ARTIFACT_ID
            artifact androidJavadocJar
            artifact androidSourcesJar
            artifact bundleRelease

            pom {
                packaging 'aar'
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', POM_NAME)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', projectUrl)
                root.children().last() + pomConfig
                def dependenciesNode = root.appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintray {
        user = properties.getProperty("bintrayUsername")
        key = properties.getProperty("bintrayApiKey")
        publications = ['mavenTreasure']
        pkg {
            repo = bintrayRepo
            name = bintrayName
            desc = bintrayDescription
            websiteUrl = projectUrl
            issueTrackerUrl = issuesUrl
            vcsUrl = scmUrl
            licenses = ['Apache-2.0']
            dryRun = properties.hasProperty("dryRun") ? properties.getProperty("dryRun") : false
            override = true
            publish = true
            publicDownloadNumbers = true
            version {
                desc = bintrayDescription
                gpg {
                    sign = false
                    passphrase = properties.getProperty("bintrayGpgPassword")
                }
                mavenCentralSync {
                    sync = properties.hasProperty("syncWithMavenCentral") ? properties.getProperty("syncWithMavenCentral") : false
                    user = properties.getProperty("mavenCentralUsername")
                    password = properties.getProperty("mavenCentralPassword")
                    close = '1' // If set to 0, you have to manually click release
                }
            }
        }
    }
}